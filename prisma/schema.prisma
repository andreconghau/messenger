// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String?   @unique
  name      String?
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationsIds String[] @db.ObjectId
  conversations Conversation[] @relation("UserConversations", fields: [conversationsIds], references: [id]) 

  seenMessagesIds String[] @db.ObjectId
  seenMessages Message[] @relation("UserSeenMessages", fields: [seenMessagesIds], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  type      String
  provider  String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_in Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastMessage DateTime @default(now())
  name      String?
  isGroup   Boolean?

  messagesIds String[] @db.ObjectId
  messages Message[]

  usersIds String[] @db.ObjectId
  users User[] @relation("UserConversations", fields: [usersIds], references: [id])


}

model Message{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seenIds String[] @db.ObjectId
  seen User[] @relation("UserSeenMessages", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id])

}